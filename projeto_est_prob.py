# -*- coding: utf-8 -*-
"""Projeto_est_prob.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1klIGtACGhrm2VZAjKuMBLU9bZUf4PUmw
"""

#@title **Importar bibliotecas** { vertical-output: true, form-width: "60%" }

# Para manipulação e análise de dados
import pandas as pd

# Para visualização de dados
import matplotlib.pyplot as plt
import seaborn as sns

# Para realizar cálculos estatísticos
import numpy as np
from scipy.stats import norm

# Para lidar com o Google Drive (você já importou, mas não custa reforçar)
from google.colab import drive

#@title **Montar Google Drive e dar permissão** { vertical-output: true, form-width: "30%" }
from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
# %cd /content/drive
# %ls

from google.colab import drive
drive.flush_and_unmount()

#@title **Preparação dos Dados**
df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv", sep=';')

df.head()

#@title **Média de sintomas por faixa de idade**
import pandas as pd
import numpy as np
from google.colab import drive

# Montar o Google Drive
drive.mount('/content/drive')

# Definir o caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
sintomas_colunas = ['FEBRE', 'TOSSE', 'GARGANTA', 'DISPNEIA', 'DESC_RESP',
                    'SATURACAO', 'DIARREIA', 'VOMITO', 'DOR_ABD', 'FADIGA',
                    'PERD_OLFT', 'PERD_PALA', 'OUTRO_SIN']

colunas_necessarias = ['CLASSI_FIN', 'NU_IDADE_N', 'TP_IDADE'] + sintomas_colunas

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras nos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Remover linhas com valores ausentes nas colunas de idade
df_covid.dropna(subset=['NU_IDADE_N', 'TP_IDADE'], inplace=True)

# Converter idade para anos
df_covid['IDADE_ANOS'] = np.where(df_covid['TP_IDADE'] == 1, df_covid['NU_IDADE_N'] / 365,
                          np.where(df_covid['TP_IDADE'] == 2, df_covid['NU_IDADE_N'] / 12, df_covid['NU_IDADE_N']))

# Criar faixas etárias
bins = [0, 18, 35, 50, 65, 80, 100]
labels = ['0-18', '19-35', '36-50', '51-65', '66-80', '81-100']
df_covid['FAIXA_IDADE'] = pd.cut(df_covid['IDADE_ANOS'], bins=bins, labels=labels, right=False)

# Verificar se todas as colunas de sintomas existem
sintomas_existentes = [col for col in sintomas_colunas if col in df_covid.columns]

# Criar coluna de quantidade de sintomas apenas para colunas existentes
df_covid['QT_SINTOMAS'] = df_covid[sintomas_existentes].eq(1).sum(axis=1)

# Calcular estatísticas dos sintomas por faixa etária
estatisticas_sintomas = df_covid.groupby('FAIXA_IDADE')['QT_SINTOMAS'].agg(['mean', 'median', 'std']).rename(
    columns={'mean': 'Média', 'median': 'Mediana', 'std': 'Desvio Padrão'}
)

# Exibir resultados
print(estatisticas_sintomas)

#@title **Média de sintomas por faixa de idade**
import matplotlib.pyplot as plt
import seaborn as sns

# Criar o gráfico de barras
plt.figure(figsize=(10, 6))
sns.barplot(x=estatisticas_sintomas.index, y=estatisticas_sintomas['Média'], palette='viridis')

# Adicionar títulos e rótulos
plt.title('Quantidade Média de Sintomas por Faixa Etária', fontsize=14)
plt.xlabel('Faixa Etária', fontsize=12)
plt.ylabel('Média de Sintomas', fontsize=12)
plt.xticks(rotation=45)

# Exibir o gráfico
plt.show()

#@title **Distribuição Geográfica de Casos, Óbitos e Probabilidade de Óbito por Estado**
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'SG_UF_NOT', 'EVOLUCAO']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Remover valores nulos essenciais
df_covid.dropna(subset=['SG_UF_NOT', 'EVOLUCAO'], inplace=True)

# Criar colunas de contagem de casos e óbitos
df_covid['CASOS'] = 1  # Cada linha representa um caso confirmado
df_covid['OBITOS'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)  # Óbito confirmado (EVOLUCAO == 2)

# Agrupar por estado
resumo_estados = df_covid.groupby('SG_UF_NOT').agg(
    CASOS=('CASOS', 'sum'),
    OBITOS=('OBITOS', 'sum')
)

# Calcular a probabilidade de óbito (taxa de letalidade) para cada estado
resumo_estados['PROBABILIDADE_OBITO'] = resumo_estados['OBITOS'] / resumo_estados['CASOS']

# Ordenar por número de casos
resumo_estados = resumo_estados.sort_values(by='CASOS', ascending=False)

# Exibir os dados
print("\n**Resumo por Estado:**")
print(resumo_estados)

sns.set_theme(style="whitegrid")

# **Gráfico da Distribuição de Casos por Estado**
plt.figure(figsize=(12, 6))
sns.barplot(x=resumo_estados.index, y=resumo_estados['CASOS'], color='royalblue', edgecolor='black')
plt.title('Distribuição de Casos de COVID-19 por Estado', fontsize=14)
plt.xlabel('Estado', fontsize=12)
plt.ylabel('Número de Casos', fontsize=12)
plt.xticks(rotation=45)
plt.show()

# **Gráfico da Distribuição de Óbitos por Estado**
plt.figure(figsize=(12, 6))
sns.barplot(x=resumo_estados.index, y=resumo_estados['OBITOS'], color='crimson', edgecolor='black')
plt.title('Distribuição de Óbitos por COVID-19 por Estado', fontsize=14)
plt.xlabel('Estado', fontsize=12)
plt.ylabel('Número de Óbitos', fontsize=12)
plt.xticks(rotation=45)
plt.show()

# **Gráfico da Probabilidade de Óbito por Estado**
plt.figure(figsize=(12, 6))
sns.barplot(x=resumo_estados.index, y=resumo_estados['PROBABILIDADE_OBITO'], color='darkorange', edgecolor='black')
plt.title('Probabilidade de Óbito por COVID-19 por Estado', fontsize=14)
plt.xlabel('Estado', fontsize=12)
plt.ylabel('Probabilidade de Óbito', fontsize=12)
plt.xticks(rotation=45)
plt.ylim(0, resumo_estados['PROBABILIDADE_OBITO'].max() * 1.1)
plt.show()

#@title **Taxa de Mortalidade por Faixa Etária e Sexo**
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir as colunas necessárias
colunas_necessarias = ['NU_IDADE_N', 'TP_IDADE', 'EVOLUCAO', 'CS_SEXO', 'CLASSI_FIN']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Remover valores nulos das colunas essenciais
df_covid.dropna(subset=['NU_IDADE_N', 'TP_IDADE', 'CS_SEXO', 'EVOLUCAO'], inplace=True)

# Filtrar apenas sexo válido (M e F)
df_covid = df_covid[df_covid['CS_SEXO'].isin(['M', 'F'])]

# Converter idade para anos
df_covid['IDADE_ANOS'] = np.where(df_covid['TP_IDADE'] == 1, df_covid['NU_IDADE_N'] / 365,
                          np.where(df_covid['TP_IDADE'] == 2, df_covid['NU_IDADE_N'] / 12, df_covid['NU_IDADE_N']))

# Criar faixas etárias
bins = [0, 18, 35, 50, 60, 80, 100]
labels = ['0-18', '19-35', '36-50', '51-59', '60-79', '80+']
df_covid['FAIXA_IDADE'] = pd.cut(df_covid['IDADE_ANOS'], bins=bins, labels=labels, right=False)

# Criar coluna de óbito (EVOLUCAO == 2 indica óbito)
df_covid['OBITO'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)

# Criar tabela com taxa de mortalidade por faixa etária e sexo
taxa_mortalidade = df_covid.groupby(['FAIXA_IDADE', 'CS_SEXO'])['OBITO'].sum() / df_covid.groupby(['FAIXA_IDADE', 'CS_SEXO']).size()

# Transformar em DataFrame
taxa_mortalidade = taxa_mortalidade.reset_index().rename(columns={0: 'Taxa Mortalidade'})

# Exibir tabela com taxas de mortalidade
print("Taxa de Mortalidade por Faixa Etária e Sexo:")
print(taxa_mortalidade)

# Criar gráfico da taxa de mortalidade por faixa etária e sexo
plt.figure(figsize=(10, 6))
ax = sns.barplot(data=taxa_mortalidade, x='FAIXA_IDADE', y='Taxa Mortalidade', hue='CS_SEXO', palette='coolwarm')

# Adicionar títulos e rótulos
plt.title('Taxa de Mortalidade por Faixa Etária e Sexo', fontsize=14)
plt.xlabel('Faixa Etária', fontsize=12)
plt.ylabel('Taxa de Mortalidade', fontsize=12)

# legenda
handles, labels = ax.get_legend_handles_labels()
labels = ['Masculino' if label == 'M' else 'Feminino' for label in labels]
plt.legend(handles, labels, title='Sexo')

plt.xticks(rotation=45)
plt.show()

#@title **Distribuição de Comorbidades e Probabilidade de Óbito**
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir as colunas necessárias para a análise de comorbidades e óbitos
colunas_necessarias = ['CLASSI_FIN', 'EVOLUCAO', 'CARDIOPATI', 'HEMATOLOGI', 'HEPATICA', 'ASMA',
                       'DIABETES', 'NEUROLOGIC', 'PNEUMOPATI', 'IMUNODEPRE', 'RENAL',
                       'OBESIDADE', 'OUT_MORBI']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Verificação
if 'CLASSI_FIN' not in df.columns:
    print("Erro: A coluna 'CLASSI_FIN' não foi encontrada na base de dados.")
else:
    # Filtrar apenas casos confirmados de COVID-19
    df_covid = df[df['CLASSI_FIN'] == 5].copy()

    # Remover valores nulos da coluna EVOLUCAO
    df_covid.dropna(subset=['EVOLUCAO'], inplace=True)

    # Criar coluna de óbito (EVOLUCAO == 2 indica óbito)
    df_covid['OBITO'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)

    # Remover a coluna CLASSI_FIN, pois não será mais necessária
    df_covid.drop(columns=['CLASSI_FIN'], inplace=True)

    # Verificar se há colunas de comorbidades na base
    comorbidades_existentes = [col for col in df_covid.columns if col in colunas_necessarias and col not in ['EVOLUCAO']]

    if not comorbidades_existentes:
        print("Erro: Nenhuma coluna de comorbidade foi encontrada na base de dados.")
    else:
        # Criar uma contagem de pacientes com cada comorbidade (1 = Sim)
        comorbidade_freq = df_covid[comorbidades_existentes].apply(lambda x: (x == 1).sum())

        # Criar um DataFrame para exibição
        comorbidade_df = pd.DataFrame({'Comorbidade': comorbidade_freq.index, 'Frequência': comorbidade_freq.values})

        # Exibir a tabela de distribuição de comorbidades
        print("\nDistribuição de Comorbidades em Pacientes Infectados:")
        print(comorbidade_df.sort_values(by='Frequência', ascending=False))

        # gráfico da distribuição de comorbidades
        plt.figure(figsize=(12, 6))
        sns.barplot(data=comorbidade_df.sort_values(by='Frequência', ascending=False),
                    x='Comorbidade', y='Frequência', color='blue')  # Cor única

        # Adicionar títulos e rótulos
        plt.title('Distribuição de Comorbidades em Pacientes com COVID-19', fontsize=14)
        plt.xlabel('Comorbidade', fontsize=12)
        plt.ylabel('Número de Pacientes', fontsize=12)
        plt.xticks(rotation=45)

        # Exibir gráfico
        plt.show()

        # **Cálculo da Probabilidade de Óbito para cada Comorbidade**
        prob_mortalidade = {}

        for comorbidade in comorbidades_existentes:
            total_comorbidos = df_covid[df_covid[comorbidade] == 1].shape[0]
            total_comorbidos_obito = df_covid[(df_covid[comorbidade] == 1) & (df_covid['OBITO'] == 1)].shape[0]

            if total_comorbidos > 0:
                prob_mortalidade[comorbidade] = total_comorbidos_obito / total_comorbidos
            else:
                prob_mortalidade[comorbidade] = np.nan  # Caso não haja pacientes com essa comorbidade

        # Transformar em DataFrame corretamente
        prob_mortalidade_df = pd.DataFrame({'Comorbidade': list(prob_mortalidade.keys()),
                                            'Probabilidade de Óbito': list(prob_mortalidade.values())})

        # Remover valores NaN antes de ordenar
        prob_mortalidade_df.dropna(inplace=True)

        # Exibir a tabela de probabilidades de óbito
        print("\nProbabilidade de Óbito para cada Comorbidade:")
        print(prob_mortalidade_df.sort_values(by='Probabilidade de Óbito', ascending=False))

        # Criar gráfico de probabilidade de óbito por comorbidade sem gradiente
        plt.figure(figsize=(12, 6))
        sns.barplot(data=prob_mortalidade_df.sort_values(by='Probabilidade de Óbito', ascending=False),
                    x='Comorbidade', y='Probabilidade de Óbito', color='red')  # Cor única

        # Adicionar títulos e rótulos
        plt.title('Probabilidade de Óbito por Comorbidade', fontsize=14)
        plt.xlabel('Comorbidade', fontsize=12)
        plt.ylabel('Probabilidade de Óbito', fontsize=12)
        plt.xticks(rotation=45)

        # Exibir gráfico
        plt.show()

#@title **Análise Temporal de Casos e Óbitos**
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir as colunas necessárias para a análise temporal
colunas_necessarias = ['DT_SIN_PRI', 'CLASSI_FIN', 'EVOLUCAO']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Converter a coluna de data para o formato datetime
df_covid['DT_SIN_PRI'] = pd.to_datetime(df_covid['DT_SIN_PRI'], errors='coerce', format='%d/%m/%Y')

# Filtrar apenas casos de 2021
df_covid = df_covid[(df_covid['DT_SIN_PRI'] >= '2021-01-01') & (df_covid['DT_SIN_PRI'] <= '2021-12-31')]

# Criar colunas para contagem de casos e óbitos
df_covid['CASOS'] = 1
df_covid['OBITOS'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)  # EVOLUCAO == 2 indica óbito

# Agrupar por data
casos_diarios = df_covid.groupby('DT_SIN_PRI')['CASOS'].sum()
obitos_diarios = df_covid.groupby('DT_SIN_PRI')['OBITOS'].sum()

# Criar gráfico da evolução temporal de casos e óbitos
plt.figure(figsize=(12, 6))
plt.plot(casos_diarios.index, casos_diarios.values, label='Casos', color='blue', linewidth=2)
plt.plot(obitos_diarios.index, obitos_diarios.values, label='Óbitos', color='red', linewidth=2)

# Adicionar títulos e rótulos
plt.title('Evolução Temporal de Casos e Óbitos por COVID-19 em 2021', fontsize=14)
plt.xlabel('Data', fontsize=12)
plt.ylabel('Número de Casos / Óbitos', fontsize=12)
plt.legend()
plt.xticks(rotation=45)

# Exibir gráfico
plt.show()

#@title **Proporção de Óbitos por Idade e Comorbidades**
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir as colunas necessárias para a análise de óbitos e comorbidades
colunas_necessarias = ['CLASSI_FIN', 'NU_IDADE_N', 'TP_IDADE', 'EVOLUCAO',
                       'DIABETES', 'CARDIOPATI', 'OBESIDADE', 'RENAL',
                       'PNEUMOPATI', 'IMUNODEPRE', 'HEPATICA', 'NEUROLOGIC']

# Carregar apenas as colunas necessárias (evita uso excessivo de RAM)
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Verificar se a coluna CLASSI_FIN existe antes de continuar
if 'CLASSI_FIN' not in df.columns:
    print("Erro: A coluna 'CLASSI_FIN' não foi encontrada na base de dados.")
else:
    # Filtrar apenas casos confirmados de COVID-19
    df_covid = df[df['CLASSI_FIN'] == 5].copy()

    # Remover valores nulos das colunas essenciais
    df_covid.dropna(subset=['NU_IDADE_N', 'TP_IDADE', 'EVOLUCAO'], inplace=True)

    # Converter idade para anos de forma eficiente
    df_covid['IDADE_ANOS'] = np.where(df_covid['TP_IDADE'] == 1, df_covid['NU_IDADE_N'] / 365,
                              np.where(df_covid['TP_IDADE'] == 2, df_covid['NU_IDADE_N'] / 12, df_covid['NU_IDADE_N']))

    # Criar faixas etárias
    bins = [0, 18, 35, 50, 60, 80, 100]
    labels = ['0-18', '19-35', '36-50', '51-59', '60-79', '80+']
    df_covid['FAIXA_IDADE'] = pd.cut(df_covid['IDADE_ANOS'], bins=bins, labels=labels, right=False)

    # Criar coluna de óbito (EVOLUCAO == 2 indica óbito)
    df_covid['OBITO'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)

    # **Verificar todas as colunas de comorbidades disponíveis** (evita erro caso faltem algumas)
    comorbidades_existentes = [col for col in colunas_necessarias if col in df_covid.columns and col not in ['CLASSI_FIN', 'NU_IDADE_N', 'TP_IDADE', 'EVOLUCAO']]

    # Criar coluna indicando presença de qualquer comorbidade
    df_covid['COMORBIDADE'] = df_covid[comorbidades_existentes].apply(lambda x: (x == 1).any(), axis=1)

    # **Converter valores booleanos para texto legível**
    df_covid['COMORBIDADE'] = df_covid['COMORBIDADE'].map({True: 'Com Comorbidade', False: 'Sem Comorbidade'})

    # Calcular a proporção de óbitos por faixa etária e comorbidades
    proporcao_obitos = df_covid.groupby(['FAIXA_IDADE', 'COMORBIDADE'])['OBITO'].mean().reset_index()

    # Exibir tabela de proporção de óbitos
    print("\nProporção de Óbitos por Faixa Etária e Comorbidades:")
    print(proporcao_obitos)

    # Criar gráfico de proporção de óbitos por faixa etária e comorbidade
    plt.figure(figsize=(10, 6))
    sns.barplot(data=proporcao_obitos, x='FAIXA_IDADE', y='OBITO', hue='COMORBIDADE', palette='coolwarm')

    # Adicionar títulos e rótulos
    plt.title('Proporção de Óbitos por Faixa Etária e Comorbidades', fontsize=14)
    plt.xlabel('Faixa Etária', fontsize=12)
    plt.ylabel('Proporção de Óbitos', fontsize=12)
    plt.legend(title='Comorbidade')
    plt.xticks(rotation=45)

    # Exibir gráfico
    plt.show()

#@title **Proporção de mulheres idosas infectadas em 2021**
import pandas as pd
import numpy as np
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'CS_SEXO', 'NU_IDADE_N', 'TP_IDADE', 'DT_SIN_PRI']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Verificar se a coluna CLASSI_FIN existe antes de continuar
if 'CLASSI_FIN' not in df.columns:
    print("Erro: A coluna 'CLASSI_FIN' não foi encontrada na base de dados.")
else:
    # Filtrar apenas casos confirmados de COVID-19
    df_covid = df[df['CLASSI_FIN'] == 5].copy()

    # Remover valores nulos essenciais
    df_covid.dropna(subset=['CS_SEXO', 'NU_IDADE_N', 'TP_IDADE', 'DT_SIN_PRI'], inplace=True)

    # Converter a data para formato datetime
    df_covid['DT_SIN_PRI'] = pd.to_datetime(df_covid['DT_SIN_PRI'], errors='coerce', format='%d/%m/%Y')
    df_covid = df_covid[(df_covid['DT_SIN_PRI'] >= '2021-01-01') & (df_covid['DT_SIN_PRI'] <= '2021-12-31')]

    # Converter idade para anos
    df_covid['IDADE_ANOS'] = np.where(df_covid['TP_IDADE'] == 1, df_covid['NU_IDADE_N'] / 365,
                              np.where(df_covid['TP_IDADE'] == 2, df_covid['NU_IDADE_N'] / 12, df_covid['NU_IDADE_N']))

    # Filtrar apenas mulheres idosas (idade >= 60 anos)
    mulheres_idosas = df_covid[(df_covid['CS_SEXO'] == 'F') & (df_covid['IDADE_ANOS'] >= 60)]

    # Calcular o número total de mulheres idosas infectadas
    total_mulheres_idosas = len(mulheres_idosas)

    # Calcular a proporção de mulheres idosas no total de infectados
    proporcao_mulheres_idosas = total_mulheres_idosas / len(df_covid)

    # Exibir resultados
    print(f"Número total de mulheres idosas infectadas em 2021: {total_mulheres_idosas}")
    print(f"Proporção de mulheres idosas entre os infectados: {proporcao_mulheres_idosas:.2%}")

#@title **Qual a probabilidade de um paciente ser homem?**
import pandas as pd
import numpy as np
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'CS_SEXO']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Verificar se a coluna CLASSI_FIN existe antes de continuar
if 'CLASSI_FIN' not in df.columns:
    print("Erro: A coluna 'CLASSI_FIN' não foi encontrada na base de dados.")
else:
    # Filtrar apenas casos confirmados de COVID-19
    df_covid = df[df['CLASSI_FIN'] == 5].copy()

    # Remover valores nulos da coluna de sexo
    df_covid.dropna(subset=['CS_SEXO'], inplace=True)

    # Contar total de infectados por COVID-19
    total_infectados = len(df_covid)

    # Contar total de homens infectados (CS_SEXO == 'M')
    total_homens = len(df_covid[df_covid['CS_SEXO'] == 'M'])

    # Calcular a probabilidade
    prob_homem = total_homens / total_infectados

    # Exibir resultados
    print(f"Total de infectados por COVID-19: {total_infectados}")
    print(f"Total de homens infectados: {total_homens}")
    print(f"Probabilidade de um paciente infectado ser homem: {prob_homem:.2%}")

#@title **Análise de casos por tipo de atendimento (hospitais, UTI, casa)**

import pandas as pd
import numpy as np
import scipy.stats as stats
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'CS_SEXO', 'HOSPITAL', 'UTI']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Verificar valores únicos em CS_SEXO antes da filtragem
print("\nValores únicos em CS_SEXO antes da filtragem:", df['CS_SEXO'].unique())

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Filtrar apenas sexo válido (M e F)
df_covid = df_covid[df_covid['CS_SEXO'].isin(['M', 'F'])]

# Remover valores nulos das colunas essenciais
df_covid.dropna(subset=['CS_SEXO', 'HOSPITAL', 'UTI'], inplace=True)

# Verificar valores únicos em HOSPITAL e UTI
print("\nValores únicos em HOSPITAL:", df_covid['HOSPITAL'].unique())
print("Valores únicos em UTI:", df_covid['UTI'].unique())

# Criar uma coluna para definir o tipo de atendimento
df_covid['TIPO_ATENDIMENTO'] = np.where(df_covid['UTI'] == 1, 'UTI',
                                np.where(df_covid['HOSPITAL'] == 1, 'Hospital', 'Casa'))

# Criar Tabela de Contingência comparando tipo de atendimento por sexo
tabela_contingencia = pd.crosstab(df_covid['CS_SEXO'], df_covid['TIPO_ATENDIMENTO'])

# Exibir tabela de contingência corrigida
print("Tabela de Contingência:")
print(tabela_contingencia)

# Realizar o teste qui-quadrado
chi2, p, dof, expected = stats.chi2_contingency(tabela_contingencia)

# Exibir resultados do teste qui-quadrado
print("Resultados do Teste Qui-Quadrado:")
print(f"Estatística Qui-Quadrado: {chi2:.4f}")
print(f"p-valor: {p:.4f}")
print(f"Graus de liberdade: {dof}")
print("\nFrequências esperadas:")
print(expected)

# Interpretar o p-valor
alpha = 0.05
if p < alpha:
    print("Conclusão: Há diferença estatisticamente significativa na distribuição dos tipos de atendimento entre homens e mulheres.")
else:
    print("Conclusão: Não há evidência estatística de diferença na distribuição dos tipos de atendimento entre homens e mulheres.")

#@title **Testes de Hipóteses sobre a Mortalidade entre Diferentes Grupos**
import pandas as pd
import numpy as np
import scipy.stats as stats
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'CS_SEXO', 'NU_IDADE_N', 'TP_IDADE', 'EVOLUCAO']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Remover valores nulos das colunas essenciais
df_covid.dropna(subset=['CS_SEXO', 'NU_IDADE_N', 'TP_IDADE', 'EVOLUCAO'], inplace=True)

# Converter idade para anos
df_covid['IDADE_ANOS'] = np.where(df_covid['TP_IDADE'] == 1, df_covid['NU_IDADE_N'] / 365,
                          np.where(df_covid['TP_IDADE'] == 2, df_covid['NU_IDADE_N'] / 12, df_covid['NU_IDADE_N']))

# Criar coluna binária para mortalidade (EVOLUCAO == 2 indica óbito)
df_covid['MORTALIDADE'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)

# **Teste t de Student: Comparação entre homens e mulheres**
homens = df_covid[df_covid['CS_SEXO'] == 'M']['MORTALIDADE']
mulheres = df_covid[df_covid['CS_SEXO'] == 'F']['MORTALIDADE']

t_stat, p_valor_t = stats.ttest_ind(homens, mulheres, equal_var=False)

print("\n**Teste t de Student: Mortalidade entre Homens e Mulheres**")
print(f"Estatística t: {t_stat:.4f}")
print(f"p-valor: {p_valor_t:.4f}")

if p_valor_t < 0.05:
    print("Conclusão: Há diferença estatisticamente significativa na mortalidade entre homens e mulheres.")
else:
    print("Conclusão: Não há evidência estatística de diferença na mortalidade entre homens e mulheres.")

# **ANOVA: Comparação entre diferentes faixas etárias**
bins = [0, 18, 35, 50, 60, 80, 100]
labels = ['0-18', '19-35', '36-50', '51-59', '60-79', '80+']
df_covid['FAIXA_IDADE'] = pd.cut(df_covid['IDADE_ANOS'], bins=bins, labels=labels, right=False)

grupos = [df_covid[df_covid['FAIXA_IDADE'] == faixa]['MORTALIDADE'] for faixa in labels]

anova_stat, p_valor_anova = stats.f_oneway(*grupos)

print("\n**ANOVA: Mortalidade por Faixa Etária**")
print(f"Estatística F: {anova_stat:.4f}")
print(f"p-valor: {p_valor_anova:.4f}")

if p_valor_anova < 0.05:
    print("Conclusão: Há diferença estatisticamente significativa na mortalidade entre as faixas etárias.")
else:
    print("Conclusão: Não há evidência estatística de diferença na mortalidade entre as faixas etárias.")

#@title **Análise de Diferenças entre Regiões em Termos de Proporção de Óbitos**
import pandas as pd
import numpy as np
import scipy.stats as stats
from scipy.stats import levene
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'SG_UF_NOT', 'EVOLUCAO']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Remover valores nulos das colunas essenciais
df_covid.dropna(subset=['SG_UF_NOT', 'EVOLUCAO'], inplace=True)

# Criar uma coluna binária para óbito (EVOLUCAO == 2 indica óbito)
df_covid['OBITO'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)

# Padronizar nomes dos estados para evitar duplicação
df_covid['SG_UF_NOT'] = df_covid['SG_UF_NOT'].str.upper().str.strip()

# Criar tabela de contingência
tabela_obitos = pd.crosstab(df_covid['SG_UF_NOT'], df_covid['OBITO'])

# Teste Qui-Quadrado: Diferença na proporção de óbitos entre regiões
chi2, p, dof, expected = stats.chi2_contingency(tabela_obitos)

# Exibir resultados do teste Qui-Quadrado
print("\n**Teste Qui-Quadrado: Diferença na Proporção de Óbitos entre Regiões**")
print(f"Estatística Qui-Quadrado: {chi2:.4f}")
print(f"p-valor: {p:.4f}")
print(f"Graus de liberdade: {dof}")

if p < 0.05:
    print("Conclusão: Há diferença estatisticamente significativa na proporção de óbitos entre regiões.")
else:
    print("Conclusão: Não há evidência estatística de diferença na proporção de óbitos entre regiões.")

# Criar lista de grupos de óbitos por estado
grupos_obitos = [df_covid[df_covid['SG_UF_NOT'] == uf]['OBITO'] for uf in df_covid['SG_UF_NOT'].unique()]

# Teste de homogeneidade de variâncias (Levene)
stat_levene, p_levene = levene(*grupos_obitos)

print(f"\nTeste de Homogeneidade de Variâncias (Levene): p-valor = {p_levene:.4f}")

if p_levene < 0.05:
    print("As variâncias entre os grupos são diferentes. Vamos usar Welch ANOVA.")
    anova_stat, p_anova = stats.f_oneway(*grupos_obitos)
else:
    print("As variâncias entre os grupos são homogêneas. Podemos usar ANOVA padrão.")
    anova_stat, p_anova = stats.f_oneway(*grupos_obitos)

# Exibir resultados do teste ANOVA
print("\n**ANOVA: Diferença na Proporção de Óbitos entre Regiões**")
print(f"Estatística F: {anova_stat:.4f}")
print(f"p-valor: {p_anova:.4f}")

if p_anova < 0.05:
    print("Conclusão: Há diferença estatisticamente significativa na proporção de óbitos entre regiões.")
else:
    print("Conclusão: Não há evidência estatística de diferença na proporção de óbitos entre regiões.")

#@title **Intervalo de Confiança para a Taxa de Mortalidade**
import pandas as pd
import numpy as np
import scipy.stats as stats
from google.colab import drive

# Montar Google Drive
drive.mount('/content/drive')

# Definir caminho do arquivo
file_path = "/content/drive/MyDrive/Colab Notebooks/INFLUD21-01-05-2023.csv"

# Definir colunas necessárias
colunas_necessarias = ['CLASSI_FIN', 'EVOLUCAO']

# Carregar apenas as colunas necessárias
df = pd.read_csv(file_path, usecols=colunas_necessarias, delimiter=';', encoding='latin1')

# Remover espaços extras dos nomes das colunas
df.columns = df.columns.str.strip()

# Filtrar apenas casos confirmados de COVID-19
df_covid = df[df['CLASSI_FIN'] == 5].copy()

# Remover valores nulos na coluna EVOLUCAO
df_covid.dropna(subset=['EVOLUCAO'], inplace=True)

# Criar uma variável binária para óbito (EVOLUCAO == 2 indica óbito)
df_covid['OBITO'] = np.where(df_covid['EVOLUCAO'] == 2, 1, 0)

# Calcular a proporção de óbitos
total_infectados = len(df_covid)
total_obitos = df_covid['OBITO'].sum()
taxa_mortalidade = total_obitos / total_infectados

#**Cálculo do Intervalo de Confiança (IC) para proporções**
# Fórmula do erro padrão para proporções:
erro_padrao = np.sqrt((taxa_mortalidade * (1 - taxa_mortalidade)) / total_infectados)

# Cálculo do Intervalo de Confiança de 95% usando a distribuição normal (Z = 1.96)
z = 1.96
ic_inferior = taxa_mortalidade - z * erro_padrao
ic_superior = taxa_mortalidade + z * erro_padrao

# Exibir resultados
print("\n**Intervalo de Confiança para a Taxa de Mortalidade (95%)**")
print(f"Total de infectados: {total_infectados}")
print(f"Total de óbitos: {total_obitos}")
print(f"Taxa de mortalidade estimada: {taxa_mortalidade:.2%}")
print(f"Intervalo de Confiança (95%): [{ic_inferior:.4%}, {ic_superior:.4%}]")